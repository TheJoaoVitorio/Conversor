unit uCDSProdutos;

interface

uses
  Datasnap.DBClient, Data.DB, System.SysUtils, FireDAC.Comp.Client;

type
  TCDSProdutos = class
    private
      cdsProd : TClientDataSet;

    public
      constructor Create;
      destructor Destroy; override;

      procedure CriarCDS;

      function PovoaCds(Tabela : String) : TFDQuery;
      property iCDSProd : TClientDataSet read cdsProd write cdsProd;
  end;

implementation

{ TCDSProdutos }

constructor TCDSProdutos.Create;
  begin
    inherited Create;
    CriarCDS;
  end;

destructor TCDSProdutos.Destroy;
  begin
    FreeAndNil(iCDSProd);
    inherited;
  end;

procedure TCDSProdutos.CriarCDS;
  begin
    cdsProd := TCLientDataSet.Create(nil);

      with cdsProd do
      begin
        FieldDefs.Add('ID_PRODUTO', ftInteger);
        FieldDefs.Add('GTIN', ftString , 14);
        FieldDefs.Add('BARRAS', ftString , 30);
        FieldDefs.Add('BARRAS_CX', ftString , 30);
        FieldDefs.Add('PRODUTO', ftString, 120);
        FieldDefs.Add('DESCRICAO_COMPRA', ftString , 120);
        FieldDefs.Add('DESCRICAO_COMPLEMENTAR', ftString ,500);
        FieldDefs.Add('CODIGO_BALANCA', ftInteger);
        FieldDefs.Add('REFERENCIA', ftString , 100);
        FieldDefs.Add('ESTOQUE', ftString , 18);

      end;

      cdsProd.CreateDataSet;
      cdsProd.Open;
  end;

function TCDSProdutos.PovoaCDS;
  begin
    try
      try
        if Tabela = 'PRODUTOS' then
          begin
            with FBConexao.Fquery do
              begin
                Close;
                Connection := FBConexao.GetConexaoFirebird;{Conexao origem}
                SQL.Text   := 'SELECT * FROM ' + Tabela;
                Open;

                while not FBConexao.Fquery.Eof do
                  begin
                    FBCDS.iCDSProd.Append;
                    FBCDS.iCDSProd.FieldByName('ID_PRODUTO').AsInteger              := FBConexao.Fquery.FieldByName('ID_PRODUTO').AsInteger;
                    FBCDS.iCDSProd.FieldByName('GTIN').AsString                     := FBConexao.Fquery.FieldByName('GTIN').AsString;
                    FBCDS.iCDSProd.FieldByName('BARRAS').AsString                   := FBConexao.Fquery.FieldByName('BARRAS').AsString;
                    FBCDS.iCDSProd.FieldByName('BARRAS_CX').AsString                := FBConexao.Fquery.FieldByName('BARRAS_CX').AsString;
                    FBCDS.iCDSProd.FieldByName('PRODUTO').AsString                  := FBConexao.Fquery.FieldByName('PRODUTO').AsString;
                    FBCDS.iCDSProd.FieldByName('DESCRICAO_COMPRA').AsString         := FBConexao.Fquery.FieldByName('DESCRICAO_COMPRA').AsString;
                    FBCDS.iCDSProd.FieldByName('DESCRICAO_COMPLEMENTAR').AsString   := FBConexao.Fquery.FieldByName('DESCRICAO_COMPLEMENTAR').AsString;
                    FBCDS.iCDSProd.FieldByName('CODIGO_BALANCA').AsInteger          := FBConexao.Fquery.FieldByName('CODIGO_BALANCA').AsInteger;
                    FBCDS.iCDSProd.FieldByName('REFERENCIA').AsString               := FBConexao.Fquery.FieldByName('REFERENCIA').AsString;
                    FBCDS.iCDSProd.FieldByName('ESTOQUE').AsString                  := FBConexao.Fquery.FieldByName('ESTOQUE').AsString;

                    FBConexao.Fquery.Next;
                  end;

                  Result := FBConexao.Fquery;
              end;
          end
        else
          begin
            ShowMessage('Falha na transferencia.');
            Exit;
          end;
      except
        on Error: Exception do
          begin
            ShowMessage('ERROR: '+Error.Message);
            Result.Free;
            raise;
          end;

      end;

    finally
      //FBConexaoDestino.InsereProdutos(Tabela);
      ShowMessage('Aqui Insere Produtos');
    end;
  end;
end.
